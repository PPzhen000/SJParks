{"ast":null,"code":"import _toConsumableArray from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/david/GitHub/SJParks/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/david/GitHub/SJParks/client/src/components/parks.js\";\nimport React, { Component } from 'react';\nimport Todo from './todo';\nimport Items from './items';\n\nvar parks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(parks, _Component);\n\n  function parks(props) {\n    var _this;\n\n    _classCallCheck(this, parks);\n\n    // and you can tell here that i added props to the component.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(parks).call(this, props)); // It it didn't have any before. \n\n    _this.handleInput = function (e) {\n      //generic handleInput handles the change for any input field using the name and the value properties.\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n      console.log('name', name);\n      console.log('value', value);\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.addItem = function (e) {\n      e.preventDefault();\n      var newPark = _this.state.newPark;\n      var newItem = {\n        key: Date.now(),\n        //needs to be another input from the user - a parkID\n        text: newPark\n      };\n\n      if (newItem.text !== '') {\n        // .text is a name for the park that came from user's input\n        console.log(newItem);\n\n        var items = _toConsumableArray(_this.state.items).concat([newItem]); //concatinates new item object to an array of parks\n\n\n        items.sort(function (a, b) {\n          if (a.text < b.text) return -1;\n          if (a.text > b.text) return 1;\n          return 0;\n        });\n\n        _this.setState({\n          items: items,\n          newPark: ''\n        });\n      }\n    };\n\n    _this.deleteItem = function (key) {\n      var filteredItems = _this.state.items.filter(function (item) {\n        //filter() takes in an array and returns a new array with each item that passed through the true/false function.\n        return item.key !== key;\n      });\n\n      _this.setState({\n        items: filteredItems\n      });\n    };\n\n    _this.handleFilter = function (e) {\n      e.preventDefault();\n\n      var filtered = _this.state.items.filter(function (item) {\n        return item.text.includes(_this.state.filter);\n      }); //needs to filter through items according to the inputed value instead of 'hi'\n\n\n      _this.setState({\n        parkFilter: filtered,\n        filter: ''\n      });\n    };\n\n    _this.handleFilter = _this.handleFilter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      items: [],\n      parkFilter: [],\n      filter: '',\n      newPark: ''\n    };\n    return _this;\n  }\n\n  _createClass(parks, [{\n    key: \"render\",\n    value: function render() {\n      console.log('STATE', this.state);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"List\"), React.createElement(Todo, {\n        addItem: this.addItem,\n        handleInput: this.handleInput,\n        newPark: this.state.newPark,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(Items, {\n        entries: this.state.items,\n        deleteItem: this.deleteItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Filter\"), React.createElement(\"form\", {\n        onSubmit: this.handleFilter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"filter\",\n        value: this.state.filter,\n        onChange: this.handleInput,\n        type: \"text\",\n        id: \"filter\",\n        placeholder: \"Search Parks..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Search\")), React.createElement(Items, {\n        entries: this.state.parkFilter,\n        deleteItem: this.deleteItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return parks;\n}(Component); // PLEASE LOOK AT THE COMMENTS ON MY CODE AND IF YOU CAN EXPLAIN TO ME ABOUT THESE CONCEPTS\n// THANK YOU!!!\n\n\nexport { parks as default };","map":{"version":3,"sources":["/Users/david/GitHub/SJParks/client/src/components/parks.js"],"names":["React","Component","Todo","Items","parks","props","handleInput","e","target","name","value","console","log","setState","addItem","preventDefault","newPark","state","newItem","key","Date","now","text","items","sort","a","b","deleteItem","filteredItems","filter","item","handleFilter","filtered","includes","parkFilter","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Todo from './todo';\nimport Items from './items';\n\nexport default class parks extends Component {\n    constructor(props){ // and you can tell here that i added props to the component.\n        super(props); // It it didn't have any before. \n        this.handleFilter = this.handleFilter.bind(this)\n        this.state = {\n            items: [],\n            parkFilter: [],\n            filter: '',\n            newPark: '',\n        }\n    }\n\n    handleInput = e => { //generic handleInput handles the change for any input field using the name and the value properties.\n        const {name, value} = e.target;\n        console.log('name',name)\n        console.log('value',value)\n        this.setState({\n            [name]: value\n        });\n    }\n\n    addItem = e => {\n        e.preventDefault();\n        const { newPark } = this.state;\n        const newItem = {\n            key: Date.now(), //needs to be another input from the user - a parkID\n            text: newPark,\n        }\n        if (newItem.text !== ''){ // .text is a name for the park that came from user's input\n            console.log(newItem)\n            let items = [...this.state.items, newItem] //concatinates new item object to an array of parks\n            items.sort((a, b) =>{\n              if (a.text < b.text)\n                return -1;\n              if (a.text > b.text)\n                return 1;\n              return 0;\n            });\n            this.setState({\n                items: items,\n                newPark: '',\n            })  \n        }\n    }\n\n    deleteItem = key => {\n      const filteredItems = this.state.items.filter(item => { //filter() takes in an array and returns a new array with each item that passed through the true/false function.\n        return item.key !== key;\n      })\n      this.setState({\n        items: filteredItems\n      })\n    }\n\n    handleFilter = e => {\n      e.preventDefault();  \n      const filtered = this.state.items.filter(item=> {\n          return item.text.includes(this.state.filter)\n      }); //needs to filter through items according to the inputed value instead of 'hi'\n      this.setState({\n        parkFilter: filtered,\n        filter: '',\n      });\n    }\n\n    render(){\n        console.log('STATE', this.state)\n        return(\n            <div>\n                <h2>List</h2>\n                <Todo\n                    addItem={this.addItem}\n                    handleInput={this.handleInput}\n                    newPark={this.state.newPark}\n                />\n                <Items entries={this.state.items} deleteItem={this.deleteItem}/>\n\n                <h2>Filter</h2>\n                <form onSubmit={this.handleFilter}>\n                    <input \n                        name='filter'\n                        value={this.state.filter} \n                        onChange={this.handleInput} \n                        type=\"text\" id=\"filter\" placeholder=\"Search Parks..\"/>\n                    <button type=\"submit\">Search</button>\n                </form>\n                <Items entries={this.state.parkFilter} deleteItem={this.deleteItem}/>\n            </div>\n        )\n    }\n}\n\n// PLEASE LOOK AT THE COMMENTS ON MY CODE AND IF YOU CAN EXPLAIN TO ME ABOUT THESE CONCEPTS\n// THANK YOU!!!\n"]},"metadata":{},"sourceType":"module"}